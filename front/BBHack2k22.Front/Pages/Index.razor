@page "/"
@using System.Net.Http.Headers
@using BBHack2k22.Front.Models
@inject HttpClient Client


<PageTitle>Create File</PageTitle>

<h1>BBHack2k22</h1>
<EditForm Model="fileNames" OnSubmit="() => { }">
    <p>
        <label>
            Select application photos
            <InputFile OnChange="@OnInputFileChange" multiple />
        </label>
    </p>
    <button type="submit">Submit</button>
</EditForm>


@if (fileNames != null)
{
    <div class="card">
        <div class="card-body">
            <ul>
                @foreach (var file in fileNames)
                {
                    <li>
                        File: @file
                        <br>
                    </li>
                    <li>
                        Stored File Name: @GetStoredFiles(file)
                        <br>
                    </li>
                }
            </ul>
        </div>
    </div>
}

@* <button type="submit">Submit</button> *@

@code
{
    private List<string> fileNames = new();
    private List<UploadResult> _uploadResults = new();
    long maxFileSize = 1024 * 1 * 1_000_000;
    
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        
        using var content = new MultipartFormDataContent();
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            fileNames.Add(file.Name);

            content.Add(content: fileContent, name: "\"files\"", fileName: file.Name);
        }

        var response = await Client.PostAsync("http://localhost:5072/api/Filesave", content);

        var newUploadResult = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

        if (newUploadResult is not null)
            _uploadResults.Concat(newUploadResult).ToList();
    }

    private string? GetStoredFiles(string fileName)
    {
        var uploadResult = _uploadResults.FirstOrDefault(x => x.FileName == fileName);
        return uploadResult?.StoredFileName ?? "Filed not found";
    }
}
